<chapter xml:id='cscope'
  xmlns:xlink='http://www.w3.org/1999/xlink'>
  <title>程序员的利器 - cscope</title>
  &tocatalog;
  <para>
    本节所用命令的帮助入口：
  </para>
  <programlisting>
:help cscope </programlisting>
  <para>
    在前面的文章中介绍了<link xlink:href='&uri_tag_file;' xlink:show='new'>利用tag文件</link>，跳转到标签定义的地方。但如果想查找函数在哪里被调用，或者标签在哪些地方出现过，ctags就无能为力了，这时需要使用更为强大的cscope。
  </para>
  <para>
    Cscope具有纯正的Unix血统，它最早是由贝尔实验室为PDP-11计算机开发的，后来成为商用的AT&amp;T Unix发行版的组成部分。直到2000年4月，这个工具才由SCO公司以BSD license开源发行。
  </para>
  <para>
    Cscope的主页在<link xlink:href='http://cscope.sourceforge.net/' xlink:show='new'/>，如果你的计算机上没有cscope，你可以在此处下载它，在写本文时，它的最新版本是15.6。安装它非常简单，你只需要在cscope的源代码目录中执行下面三条命令：
  </para>
  <programlisting>
./configure
make
make install </programlisting>
  <para>
    在windows上也可以使用cscope，在cscope的主页上可以下载到由DJGPP编译器编译的cscope for windows，不过这个版本不能和vi一起工作。或者你可以下载cygwin工具包(<link xlink:href='http://www.cygwin.com/' xlink:show='new'/>)，这个工具包中也包含了cscope。
  </para>
  <para>
    在<link xlink:href='http://iamphet.nm.ru/cscope/' xlink:show='new'/>有Sergey Khorev预编译的一个Win32版本的cscope，这个版本的cscope可以很好的与windows版本的vim搭配使用。
  </para>
  <para>
    cscope的用法很简单，首先需要为你的代码生成一个cscope数据库。在你的项目根目录运行下面的命令：
  </para>
  <programlisting>
cscope -Rbq </programlisting>
  <para>
    这些选项的含义见后面。这个命令会生成三个文件：cscope.out, cscope.in.out, cscope.po.out。其中cscope.out是基本的符号索引，后两个文件是使用"<emphasis>-q</emphasis>"选项生成的，可以加快cscope的索引速度。
  </para>
  <para>
    在缺省情况下，cscope在生成数据库后就会进入它自己的查询界面，我们一般不用这个界面，所以使用了"<emphasis>-b</emphasis>"选项。如果你已经进入了这个界面，按<command>CTRL-D</command>退出。
  </para>
  <para>
    Cscope在生成数据库中，在你的项目目录中未找到的头文件，会自动到/usr/include目录中查找。如果你想阻止它这样做，使用"<emphasis>-k</emphasis>"选项。
  </para>
  <para>
    Cscope缺省只解析C文件(.c和.h)、lex文件(.l)和yacc文件(.y)，虽然它也可以支持C++以及Java，但它在扫描目录时会跳过C++及Java后缀的文件。如果你希望cscope解析C++或Java文件，需要把这些文件的名字和路径保存在一个名为cscope.files的文件。当cscope发现在当前目录中存在cscope.files时，就会为cscope.files中列出的所有文件生成索引数据库。通常我们使用<command>find</command>来生成cscope.files文件，仍以vim 7.0的源代码为例：
  </para>
  <programlisting>
cd ~/src/vim70 
find . –type f &gt; cscope.files
cscope -bq </programlisting>
  <para>
    这条命令把~src/vim70目录下的所有普通文件都加入了cscope.files，这样，cscope会解析该目录下的每一个文件。上面的cscope命令并没有使用"<emphasis>-R</emphasis>"参数递归查找子目录，因为在cscope.files中已经包含了子目录中的文件。
  </para>
  <para>
    注意：<command>find</command>命令输出的文件以相对路径表示，所以cscope.out的索引也相对于当前路径。如果你要在其它路径中使用当前的cscope.out，需要使用下面介绍的<emphasis>-P</emphasis>选项。
  </para>
  <para>
    Cscope只在第一次解析时扫描全部文件，以后再调用cscope，它只扫描那些改动过的文件，这大大提高了cscope生成索引的速度。
  </para>
  <para>
    下表中列出了cscope的常用选项：
  </para>
  <itemizedlist>
    <listitem>
      <emphasis role='bold'>-R</emphasis>: 在生成索引文件时，搜索子目录树中的代码
    </listitem>
    <listitem>
      <emphasis role='bold'>-b</emphasis>: 只生成索引文件，不进入cscope的界面
    </listitem>
    <listitem>
      <emphasis role='bold'>-q</emphasis>: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
    </listitem>
    <listitem>
      <emphasis role='bold'>-k</emphasis>: 在生成索引文件时，不搜索/usr/include目录
    </listitem>
    <listitem>
      <emphasis role='bold'>-i</emphasis>: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用"<emphasis role='bold'>-</emphasis>"，表示由标准输入获得文件列表。
    </listitem>
    <listitem>
      <emphasis role='bold'>-I</emphasis> <emphasis>dir</emphasis>: 在<emphasis role='bold'>-I</emphasis>选项指出的目录中查找头文件
    </listitem>
    <listitem>
      <emphasis role='bold'>-u</emphasis>: 扫描所有文件，重新生成交叉索引文件
    </listitem>
    <listitem>
      <emphasis role='bold'>-C</emphasis>: 在搜索时忽略大小写
    </listitem>
    <listitem>
      <emphasis role='bold'>-P</emphasis> <emphasis>path</emphasis>: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了。
    </listitem>
  </itemizedlist>
  <para>
    要在vim中使用cscope的功能，需要在<link xlink:href='&uri_compile;' xlink:show='nwe'>编译vim</link>时选择"<emphasis>+cscope</emphasis>"。vim的cscope接口先会调用cscope的命令行接口，然后分析其输出结果找到匹配处显示给用户。
  </para>
  <para>
    在vim中使用cscope非常简单，首先调用"<command>cscope add</command>"命令添加一个cscope数据库，然后就可以调用"<command>cscope find</command>"命令进行查找了。vim支持8种cscope的查询功能，如下：
  </para>
  <itemizedlist>
    <listitem>
      <emphasis role='bold'>s:</emphasis> 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
    </listitem>
    <listitem>
      <emphasis role='bold'>g:</emphasis> 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
    </listitem>
    <listitem>
      <emphasis role='bold'>d:</emphasis> 查找本函数调用的函数
    </listitem>
    <listitem>
      <emphasis role='bold'>c:</emphasis> 查找调用本函数的函数
    </listitem>
    <listitem>
      <emphasis role='bold'>t:</emphasis> 查找指定的字符串
    </listitem>
    <listitem>
      <emphasis role='bold'>e:</emphasis> 查找egrep模式，相当于egrep功能，但查找速度快多了
    </listitem>
    <listitem>
      <emphasis role='bold'>f:</emphasis> 查找并打开文件，类似vim的find功能
    </listitem>
    <listitem>
      <emphasis role='bold'>i:</emphasis> 查找包含本文件的文件
    </listitem>
  </itemizedlist>
  <para>
    例如，我们想在vim 7.0的源代码中查找调用do_cscope()函数的函数，我们可以输入："<command>:cs find c do_cscope</command>"，回车后发现没有找到匹配的功能，可能并没有函数调用do_cscope()。我们再输入"<command>:cs find s do_cscope</command>"，查找这个C符号出现的位置，现在vim列出了这个符号出现的所有位置。
  </para>
  <para>
    我们还可以进行字符串查找，它会双引号或单引号括起来的内容中查找。还可以输入一个正则表达式，这类似于egrep程序的功能，但它是在交叉索引数据库中查找，速度要快得多。
  </para>
  <para>
    vim提供了一些选项可以调整它的cscope功能：
  </para>
  <itemizedlist>
    <listitem>
      <emphasis>cscopecscopeprg</emphasis>选项用于设置cscope程序的位置。
    </listitem>
    <listitem>
      <emphasis>cscopecscopequickfix</emphasis>设定是否使用quickfix窗口来显示cscope的结果，详情请"<command>:help cscopequickfix</command>"；
    </listitem>
    <listitem>
      如果你想vim同时搜索tag文件以及cscope数据库，设置<emphasis>cscopecscopetag</emphasis>选项；
    </listitem>
    <listitem>
      <emphasis>cscopecscopetagorder</emphasis>选项决定是先查找tag文件还是先查找cscope数据库。设置为0则先查找cscope数据库，设置为1先查找tag文件。我通常设置为1，因为在tag文件中查找到的结果，会把最佳匹配列在第一位。
    </listitem>
  </itemizedlist>
  <para>
    vim的手册中给出了使用cscope的建议方法，使用命令"<command>:help cscope-suggestions</command>"查看。
  </para>
  <para>
    下面是我的vimrc中关于cscope接口的设置：
  </para>
  <programlisting>
    <![CDATA[
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
  set csprg=/usr/bin/cscope
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  endif
  set csverb
endif

nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
]]> </programlisting>
  <para>
    下面的两个链接是cscope主页提供的cscope使用方法，也可以作为参考：
  </para>
  <para>
    vim/cscope指导：<link xlink:href='http://cscope.sourceforge.net/cscope_vim_tutorial.html' xlink:show='new'/>
  </para>
  <para>
    在大项目中使用cscope：<link xlink:href='http://cscope.sourceforge.net/large_projects.html' xlink:show='new'/>
  </para>
  <para>
    在vim的网站上有很多与cscope相关的插件，有兴趣可以去看一下。
  </para>
  <para>
    我以前写的<link xlink:href='http://easwy.com/blog/archives/vim-cscope-ctags/' xlink:show='new'>Vim + Cscope/Ctags</link>。
  </para>
  <para>
    <emphasis role='bold'>[参考文档]</emphasis>
  </para>
  <itemizedlist>
    <listitem>
      vim帮助文件
    </listitem>
    <listitem>
      <link xlink:href='http://vimcdoc.sourceforge.net/' xlink:show='new'>vim中文手册</link>
    </listitem>
    <listitem>
      <link xlink:href='http://cscope.sourceforge.net/' xlink:show='new'/>
    </listitem>
    <listitem>
      <link xlink:href='http://iamphet.nm.ru/cscope/' xlink:show='new'/>
    </listitem>
    <listitem>
      cscope手册
    </listitem>
  </itemizedlist>

  &tocatalog;
  &copyright;
  <para>
    <emphasis role='bold'>　　　　本文链接地址:</emphasis> <link xlink:href='&uri_cscope;'/>
  </para>
</chapter>
