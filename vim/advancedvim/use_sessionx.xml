<chapter xml:id='use_sessionx'
  xmlns:xlink='http://www.w3.org/1999/xlink'>
  <title>保存项目相关配置</title>
  &tocatalog; 
  <para>
    本节所用命令的帮助入口：
  </para>
<programlisting>
:help 'path'
:help mksession
:help find
:help gf
:help CTRL-W_f </programlisting>
  <para>
    我们在前面介绍了<link xlink:href='&uri_vimrc;' xlink:show='new'>vimrc</link>，vimrc定义了vim通常的行为。然而，每个项目都有其特殊的定义，虽然我们也可以在vimrc中对每个项目进行定制，但这样一来，vimrc会变得很大，使vim启动速度变慢；另外也会使vimrc变得难以维护。
  </para>
  <para>
    因此，我们使用其它的方法来保存项目相关的信息，这就是本文的主要内容。我们将以<emphasis>path</emphasis>选项的设置为例进行讲解。
  </para>
  <para>
    <emphasis>path</emphasis>选项定义了一个目录列表，在使用gf，find，以及CTRL-W f等vim命令时，如果使用的是相对路径，那么就会在<emphasis>path</emphasis>选项定义的目录列表中查找相应的文件。<emphasis>path</emphasis>选项以逗号分隔各目录名。我们依旧以vim 7.0的源代码为例（源代码放在~/src/vim70/目录中）。
  </para>
  <para>
    对于这个项目，我们的<emphasis>path</emphasis>选项设置如下：
  </para>
<programlisting>
set path=.,/usr/include,,~/src/vim70/** </programlisting>
  <para>
    稍微解释一下各项的含义，更详细的信息，请查看<emphasis>path</emphasis>选项的帮助页：
  </para>
  <itemizedlist>
    <listitem>
      .　　　　　　　　在当前文件所在目录中搜索
    </listitem>
    <listitem>
      /usr/include　　　在/usr/include目录中搜索
    </listitem>
    <listitem>
      ,, 　　　　　　　在当前工作路径中搜索
    </listitem>
    <listitem>
      ~/src/vim70/**　　在~/src/vim70的所有子目录树中进行搜索
    </listitem>
  </itemizedlist>
  <para>
    设置了<emphasis>path</emphasis>选项后，怎么用呢？
  </para>
  <para>
    我们还是回到<link xlink:href='&uri_prologue;' xlink:show='new'>序言</link>中的屏幕抓图，我们把光标定位到src/main.c文件第22行的"fcntl.h"单词上，然后在Normal模式下按"<command>gf</command>"。咦，vim打开了/usr/include/fcntl.h文件！
  </para>
  <para>
    现在我们按"<command>CTRL-^</command>"回到刚才的位置，光标仍旧定位在第22行的"fcntl.h"单词上，然后按"<command>CTRL-W f</command>"。啊哈，这次vim打开了一个水平分隔窗口，在此窗口中打开了/usr/include/fcntl.h。
  </para>
  <para>
    尽管在src/main.c中未指定fcntl.h的路径，但vim会在<emphasis>path</emphasis>选项定义的路径中搜索此文件，方便吧！
  </para>
  <para>
    现在我们看一下"<command>find</command>"命令，输入：
  </para>
<programlisting>
:find netrw.vim </programlisting>
  <para>
    vim打开了~/src/vim70/runtime/autoload/netrw.vim文件。用这种方法打开文件真是太方便了，你不用输入文件的路径，vim会自动在<emphasis>path</emphasis>选项定义的路径中搜索。不过"<command>find</command>"命令也有缺陷，如果你只记得文件名的一部分，那么就没有办法用find命令打开这个文件了。而且find命令也不允许使用正则表达式。没关系，我们还有更好的方法来打开文件，我将在<link xlink:href='&uri_lookupfile;'>Lookupfile插件</link>中介绍这些方法。
  </para>
  <para>
    <emphasis>path</emphasis>选项介绍完了，我们进入正题，如何把本项目相关的配置保存起来，下次打开本项目时自动恢复这些配置呢？
  </para>
  <para>
    我们有两种方法做到这一点。
  </para>
  <para>
    <emphasis role='bold'>[方法1]</emphasis>
  </para>
  <para>
    我们在~/src/vim70/目录下建立一个文件，假定文件名为workspace.vim，文件内容为：
  </para>
<programlisting>
"set project path
set path+=~/src/vim70/** </programlisting>
  <para>
    这个文件中保存了项目相关的信息，例如选项值，键映射，函数定义，自动命令，等等。我们的例子中只定义的<emphasis>path</emphasis>选项，我们没有使用"set path=..."语句，在vim手册中建议使用"set path+=..."和"set path-=..."格式。
  </para>
  <para>
    接下来，在你的vimrc文件中加入下面的语句：
  </para>
<programlisting>
" execute project related configuration in current directory
if filereadable("workspace.vim")
    source workspace.vim
endif </programlisting>
  <para>
    以后，每次你在~/src/vim70/目录中启动vim时，vim都会自动载入workspace.vim，恢复项目的配置信息。
  </para>
  <para>
    <emphasis role='bold'>[方法2]</emphasis>
  </para>
  <para>
    还记得本系列文章的第二篇<link xlink:href='&uri_session;' xlink:show='new'>使用会话(session)和viminfo</link>吗？那篇文章中，我们介绍了使用session文件和viminfo保存项目环境的方法。如果你使用了会话文件，那么选项值，键映射，和其它很多信息都已经保存了。但会话的功能毕竟有限，不能把项目相关的配置全部保存下来，怎么办呢？
  </para>
  <para>
    vim的作者已经想到了这个问题，并提供了解决办法。
  </para>
  <para>
    在vim载入会话文件的最后一步，它会查找一个额外的文件并执行其中的ex命令。查找的规则是，把会话文件名的后缀去掉，然后在后面加上"<emphasis role='bold'>x.vim</emphasis>"，。假设你的会话文件名为example.session，vim就会查找是否有examplex.vim，如果找到，就会执行此文件中的ex命令。
  </para>
  <para>
    好了，我们先创建我们的会话文件：
  </para>
<programlisting>
:cd ~/src/vim70
:set sessionoptions-=curdir        '在session option中去掉curdir
:set sessionoptions+=sesdir        '在session option中加入sesdir
:mksession vim70s.vim              '创建一个会话文件 </programlisting>
  <para>
    然后再编辑一个名为~/src/vim70/vim70sx.vim的文件，文件的内容为（当然，你可以在这个文件中加入更多内容）：
  </para>
<programlisting>
"set project path
set path+=~/src/vim70/** </programlisting>
  <para>
    退出vim后，在命令行下执行"gvim &amp;"，再次进入vim，这时看到的是一个空白窗口。然后执行下面的命令：
  </para>
<programlisting>
:source ~/src/vim70/vim70s.vim  '载入会话文件 </programlisting>
  <para>
    太棒了！原来的会话环境已经恢复，并且项目相关的配置也设置好了！
  </para>
  <para>
    <emphasis role='bold'>[参考文档]</emphasis>
  </para>
  <orderedlist>
    <listitem>
    vim手册
    </listitem>
    <listitem>
      <link xlink:href='http://vimcdoc.sourceforge.net/' xlink:show='new'>vim中文手册</link>
    </listitem>
  </orderedlist>

  &tocatalog;
  &copyright;
  <para><emphasis role='bold'>　　　　本文链接地址:</emphasis> <link xlink:href='&uri_project;'/></para>
</chapter>
